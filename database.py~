"""
The database class file
"""
import os

class DataBase(object):
	"""The database class for creating an empty database"""
	def __init__(self, name, *columns):
		"""The initializer for creating a new database"""
		self.columns = list(columns)
		self.rows = []
		self.name = name
	
	def add_entry(self, *fields):
		"""adds a new to entry to self.rows"""
		#check to see if the right amount of args was passed in
		fields = list(fields)
		if len(fields) < len(self.columns):
			print("too few arguments passed in")
			return -1
		elif len(fields) > len(self.columns):
			print("too many arguments passed in")
		else:
			#right amount of arguments passed in. add them
			self.rows.append(fields)

	def save(self, path):
		"""saves the database to name.txt under standard format"""
		lines_to_write = []
		#create the column line in lines_to_write
		temp_str = ""
		for column in self.columns:
			temp_str += column + ','
		temp_str = temp_str[:-1]
		lines_to_write.append(temp_str)

		#add the rows to the lines_to_write array
		for row in self.rows:
			temp_str = ''
			for entry in row:
				temp_str += entry + ','
			temp_str = temp_str[:-1]
			lines_to_write.append(temp_str)
		

		if path[-1] != "/":
			path += "/"
		path += self.name + ".csv"
		#delete the old database file and write the new one to the same path
		if os.path.exists(path):
			os.remove(path)
		file_to_write = open(path, "w")
		for line in lines_to_write:
			file_to_write.write(line+"\n")
		file_to_write.close()

	def get_column_id(self, column_name):
		"""returns the id of the given column name"""
		for i in range(len(self.columns)):
			if self.columns[i] == column_name:
				return i
		return -1

	def query(self, query_string):
		"""runs a query on the database and returns a list of rows"""
		commands = query_string.split(" ")
		columns_to_get = []
		conditions = {}
		status = "starting"
		temporary = ""
		line_conditions = []
		for command in commands:
			if status == "starting":
				if command == 'select':
					status = "selecting"
			elif status == "selecting":
				if command == "*":
					for column in self.columns:
						columns_to_get.append(column)
						status = "deciding_and_where"
				elif command in self.columns:
					columns_to_get.append(command)
					status = "deciding_and_where"
				else:
					print("Column: {} not found".format(command))
					break
			elif status == "deciding_and_where":
				if command == "and":
					status = "selecting"
				elif command == "where":
					status = "selecting_row"
				else:
					print("Command: {} not recognized".format(command))
			elif status == "selecting_row":
				temporary = command
				status = "checking_equality"
			elif status == "checking_equality":
				equality = command
				status = "adding_condition"
			elif status == "adding_condition":
				if equality == "is" or equality == "contains":
					conditions[temporary + equality[-2:]] = command
					status = "more_commands_maybe"
				else:
					print("Condition: {} not recognized".format(equality))
					break
			elif status == "more_commands_maybe":
				if command == "and":
					line_conditions.append(1)
				elif command == "or":
					line_conditions.append(0)
				else:
					print("equality: {} not recognized".format(command))
				status = "selecting_row"
		
	
		#print(line_conditions)
		"""query analysed now search is starting"""
		#print(conditions)

		rows_to_return = []
		for i in range(len(self.rows)):
			status = False
			results = []
			for condition in conditions:
				column = condition[:-2]
				equality = condition[-2:]
				value = conditions[condition]
				column_id = self.get_column_id(column)

				if equality == "is":


					if value == self.rows[i][column_id] or value == "any":
						results.append(1)
					else:
						results.append(0)
				elif equality == "ns":
					string_to_search = self.rows[i][column_id]
					current_letter = 0
					results.append(0)
					for j in range(len(string_to_search)-len(value)+1):
						if current_letter == len(value):
							results[-1] = 1
							break
						if string_to_search[j] == value[current_letter]:
							current_letter += 1
						else:
							current_letter = 0

			status = results[0]
			for k in range(len(results)-1):
				if line_conditions[k]:
					if status and results[k+1]:
						status = True
					else:
						status = False
				else:
					if results[k+1]:
						status = True
			if status:
				row_to_add = []
				for column in columns_to_get:
					index = self.get_column_id(column)
					row_to_add.append(self.rows[i][index])
				rows_to_return.append(row_to_add)

		return rows_to_return



class DataBaseFromFile(DataBase):
	"""loads a db from a file"""
	def __init__(self, name):
		"""the init functin for databse from file"""
		#the input name should hold the path to db file
		if not os.path.exists(name):
			print("file does not exist")
		else:
			#path exists, so load and enter the database
			parts = name.split("/")
			self.name = parts[-1][:-4]
			database_file = open(name, "r")
			lines = database_file.readlines()
			database_file.close()
			processed_lines = []
			for entry in lines:
				processed_lines.append(entry.strip().split(","))
			self.columns = processed_lines[0]
			processed_lines.pop(0)
			self.rows = []
			for line in processed_lines:
				self.rows.append(line)

if __name__ == '__main__':
	print("Python database library")
	users = DataBase("users", "first", "last", "tags")
	users.add_entry("connor", "dewar", "yolo swag")
	users.add_entry("liam", "dewar", "cholo")
	print(users.query("select last and first where tags contains yolo or first is liam"))
	
